var documenterSearchIndex = {"docs":
[{"location":"library_management/","page":"Library Management","title":"Library Management","text":"CurrentModule = Kokkos","category":"page"},{"location":"library_management/#Library-Management","page":"Library Management","title":"Library Management","text":"","category":"section"},{"location":"library_management/","page":"Library Management","title":"Library Management","text":"CLibrary\nhandle\nget_symbol\nload_lib\nunload_lib\nis_lib_loaded","category":"page"},{"location":"library_management/#Kokkos.CLibrary","page":"Library Management","title":"Kokkos.CLibrary","text":"CLibrary\n\nA wrapper around a shared library, loaded with Libdl.dlopen.\n\n\n\n\n\n","category":"type"},{"location":"library_management/#Kokkos.handle","page":"Library Management","title":"Kokkos.handle","text":"handle(lib::CLibrary)\n\nReturn the handle (a Ptr{Nothing}) of lib, for use with Libdl.dlsym for example.\n\nIf lib is invalid (not loaded), returns C_NULL.\n\n\n\n\n\n","category":"function"},{"location":"library_management/#Kokkos.get_symbol","page":"Library Management","title":"Kokkos.get_symbol","text":"get_symbol(lib::CLibrary, symbol::Symbol)\n\nLoad the pointer to the given symbol. Symbol pointers are cached: Libdl.dlsym is called only if the symbol is not already in the cache.\n\n\n\n\n\n","category":"function"},{"location":"library_management/#Kokkos.load_lib","page":"Library Management","title":"Kokkos.load_lib","text":"load_lib(lib::Union{String, KokkosProject, CLibrary};\n         flags=Libdl.RTLD_LAZY | Libdl.RTLD_DEEPBIND | Libdl.RTLD_LOCAL)\n\nOpen a shared library.\n\nlib can be the path to the shared library, an existing CLibrary or a KokkosProject. If lib is a project, its target is supposed to be compiled and up-to-date.\n\nIf the library is already loaded, it is not opened another time: this guarantees that calling Libdl.dlclose once will unload the library from memory, if the library wasn't opened from elsewhere.\n\n\n\n\n\n","category":"function"},{"location":"library_management/#Kokkos.unload_lib","page":"Library Management","title":"Kokkos.unload_lib","text":"unload_lib(lib::Union{KokkosProject, CLibrary})\n\nUnload a library. Return true if the library has a valid handle and Libdl.dlclose was called.\n\nBecause of the mechanism behind shared library loading, it is not guaranteed that the library is unloaded from memory after this call. Using is_lib_loaded rather than the return value of this function is more reliable.\n\nThe symbol cache of the library is cleared by this function.\n\n\n\n\n\n","category":"function"},{"location":"library_management/#Kokkos.is_lib_loaded","page":"Library Management","title":"Kokkos.is_lib_loaded","text":"is_lib_loaded(lib::Union{KokkosProject, CLibrary})\n\nReturn true if the library was previously loaded by load_lib and is still present in memory.\n\nIf the full path to lib is still present in Libdl.dllist(), the library is considered to be loaded.\n\n\n\n\n\n","category":"function"},{"location":"views/","page":"Views","title":"Views","text":"CurrentModule = Kokkos.Views","category":"page"},{"location":"views/#Views","page":"Views","title":"Views","text":"","category":"section"},{"location":"views/#View","page":"Views","title":"View","text":"","category":"section"},{"location":"views/","page":"Views","title":"Views","text":"View\naccessible(::View)\nlabel","category":"page"},{"location":"views/#Kokkos.Views.View","page":"Views","title":"Kokkos.Views.View","text":"View{T, D, MemSpace} <: AbstractArray{T, D}\n\nWrapper around a Kokkos::View of D dimensions of type T, stored in MemSpace.\n\nBehaves like a normal Array. Indexing is done by calling the Kokkos::View::operator() function of the view, and is therefore not highly performant. The best performance with Kokkos views is achieved by calling Kokkos kernels compiled from C++.\n\nIt is supposed that all view accesses are done from the default host execution space. Since the view may be stored in a memory space different from the host, it may be invalid to access its elements: if accessible(MemSpace) is false, then all view accesses will throw an error.\n\nViews are created through CxxWrap.jl, which adds automatically a finalizer to all objects which calls the view's destructor when the Julia object is deleted by the garbage collector.\n\nIt is important to understand that for a view to be properly disposed of, there is two requirements:\n\nthe library containing its destructor is still loaded. Views created by the Kokkos.jl library will always meet this requirement.\nfinalize wasn't called.\n\n\n\n\n\n","category":"type"},{"location":"views/#Kokkos.Spaces.accessible-Tuple{Kokkos.Views.View}","page":"Views","title":"Kokkos.Spaces.accessible","text":"accessible(::View)\n\nReturn true if the view is accesssible from the default host execution space.\n\n\n\n\n\n","category":"method"},{"location":"views/#Kokkos.Views.label","page":"Views","title":"Kokkos.Views.label","text":"label(::View)\n\nReturn the label of the View.\n\n\n\n\n\n","category":"function"},{"location":"views/#Constants","page":"Views","title":"Constants","text":"","category":"section"},{"location":"views/","page":"Views","title":"Views","text":"Idx\nCOMPILED_DIMS\nCOMPILED_TYPES","category":"page"},{"location":"views/#Kokkos.Views.Idx","page":"Views","title":"Kokkos.Views.Idx","text":"Idx::Type{<:Integer}\n\nInteger type used by views for indexing on the default execution device. Usually either Cint or Clonglong.\n\nEquivalent to Kokkos::RangePolicy<>::index_type.\n\n\n\n\n\n","category":"type"},{"location":"views/#Kokkos.Views.COMPILED_DIMS","page":"Views","title":"Kokkos.Views.COMPILED_DIMS","text":"COMPILED_DIMS::Tuple{Vararg{Int32}}\n\nList of all View dimensions which are compiled.\n\nBy default, dimensions 1 and 2 are compiled.\n\n\n\n\n\n","category":"constant"},{"location":"views/#Kokkos.Views.COMPILED_TYPES","page":"Views","title":"Kokkos.Views.COMPILED_TYPES","text":"COMPILED_TYPES::Tuple{Vararg{DataType}}\n\nList of all View element types which are compiled\n\nBy default, the following types are compiled: Float64 (double), Float32 (float) and Int64 (int64_t).\n\n\n\n\n\n","category":"constant"},{"location":"environment/","page":"Environment","title":"Environment","text":"CurrentModule = Kokkos","category":"page"},{"location":"environment/#Environment","page":"Environment","title":"Environment","text":"","category":"section"},{"location":"environment/","page":"Environment","title":"Environment","text":"initialize\nfinalize\nis_initialized\nis_finalized\nrequire\nset_omp_vars\nversioninfo","category":"page"},{"location":"environment/#Kokkos.initialize","page":"Environment","title":"Kokkos.initialize","text":"initialize(;\n    num_threads=nothing,\n    device_id=nothing, map_device_id_by=nothing,\n    disable_warnings=nothing, print_configuration=nothing,\n    tune_internals=nothing,\n    tools_libs=nothing, tools_args=nothing\n)\n\nInitializes Kokkos by calling Kokkos::initialize().\n\nThe keyword arguments build are passed to the InitializationSettings constructor which is then passed to Kokkos::initialize(). A value of nothing keeps the default behaviour of Kokkos.\n\n\n\n\n\n","category":"function"},{"location":"environment/#Kokkos.finalize","page":"Environment","title":"Kokkos.finalize","text":"finalize()\n\nCalls Kokkos::finalize().\n\nwarning: Warning\nKokkos requires that all view destructors should be called before calling finalize.\n\n\n\n\n\n","category":"function"},{"location":"environment/#Kokkos.is_initialized","page":"Environment","title":"Kokkos.is_initialized","text":"is_initialized()\n\nReturn Kokkos::is_initialized().\n\n\n\n\n\n","category":"function"},{"location":"environment/#Kokkos.is_finalized","page":"Environment","title":"Kokkos.is_finalized","text":"is_finalized()\n\nReturn Kokkos::is_finalized().\n\n\n\n\n\n","category":"function"},{"location":"environment/#Kokkos.require","page":"Environment","title":"Kokkos.require","text":"require(;\n    version=nothing,\n    dims=nothing, types=nothing, idx=nothing,\n    exec_spaces=nothing, mem_spaces=nothing,\n    no_error=false\n)\n\nAsserts that the underlying Kokkos library of Kokkos.jl respects the given requirements.\n\nAn argument with a value of nothing is considered to have no requirements.\n\nversion checks for the version of Kokkos.\n\nidx checks the type of the index variables used when accessing a view.\n\nversion and idx are given as callables returning a Bool and taking a single argument: respectively a VersionNumber and a Type, e.g. passing version = >=(v\"4.0.0\") will match all Kokkos versions including v4.0.0 and above.\n\ndims, types, exec_spaces and mem_spaces are lists of the required values. \n\ndims and types check the available dimensions and types of views, while exec_spaces and mem_spaces do the same for execution and memory spaces.\n\nIf no_error is true, then this function will return false if any requirement is not met.\n\nThis function does not require for Kokkos to be initialized.\n\nExamples\n\n# Require Kokkos version 4.0.0 (exactly), and for 1D and 2D views of Float64 to be compiled:  \nKokkos.require(;\n    version = ==(v\"4.0.0\"),\n    types = [Float64],\n    dims = [1, 2]\n)\n\n# Require an index type of 8 bytes, the Cuda and OpenMP backends of Kokkos, as well as the Cuda UVM\n# memory space to be available:\nKokkos.require(;\n    idx = (==(8) âˆ˜ sizeof),\n    exec_spaces = [Kokkos.Cuda, Kokkos.OpenMP],\n    mem_spaces = [Kokkos.CudaUVMSpace]\n)\n\n\n\n\n\n","category":"function"},{"location":"environment/#Kokkos.set_omp_vars","page":"Environment","title":"Kokkos.set_omp_vars","text":"set_omp_vars(;\n    places = \"cores\",\n    bind = \"close\",\n    num_threads = Threads.nthreads()\n)\n\nHelper function to set the main OpenMP environment variables used by Kokkos. It must be called before calling initialize.\n\nplaces sets OMP_PLACES. bind sets OMP_PROC_BIND. num_threads sets OMP_NUM_THREADS.\n\nNote that since Julia threads and OpenMP threads are decoupled, there is no constraint imposed by Julia on OpenMP threads: there can be as many threads as needed.\n\n\n\n\n\n","category":"function"},{"location":"environment/#Kokkos.versioninfo","page":"Environment","title":"Kokkos.versioninfo","text":"versioninfo(io::IO = stdout; internal=true, verbose=false)\n\nPrint the version and various information about the underlying Kokkos library.\n\nIf internal is true, Kokkos::print_configuration() is called. verbose is passed to that call.\n\nThis function does not require for Kokkos to be initialized, however if internal=true then the output will be incomplete.\n\n\n\n\n\n","category":"function"},{"location":"environment/#Constants","page":"Environment","title":"Constants","text":"","category":"section"},{"location":"environment/","page":"Environment","title":"Environment","text":"KOKKOS_VERSION","category":"page"},{"location":"environment/#Kokkos.KOKKOS_VERSION","page":"Environment","title":"Kokkos.KOKKOS_VERSION","text":"KOKKOS_VERSION::VersionNumber\n\nThe Kokkos version currently loaded.\n\n\n\n\n\n","category":"constant"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"CurrentModule = Kokkos","category":"page"},{"location":"config_options/#Configuration-Options","page":"Configuration options","title":"Configuration Options","text":"","category":"section"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"Configuration options are set using Preferences.jl. Your LocalPreferences.jl file will store the options needed by your current project in a [Kokkos] section.","category":"page"},{"location":"config_options/#kokkos_path","page":"Configuration options","title":"kokkos_path","text":"","category":"section"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"The path to the Kokkos sources (not an installation!) to use. If not set, it defaults to the Kokkos version packaged with Kokkos.jl.","category":"page"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"Can be set using Kokkos.set_kokkos_path(). The value for the current Julia session is stored in Kokkos.KOKKOS_PATH.","category":"page"},{"location":"config_options/#cmake_options","page":"Configuration options","title":"cmake_options","text":"","category":"section"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"The list of CMake options to pass to all CMakeKokkosProjects.","category":"page"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"Can be set using Kokkos.set_cmake_options(). The value for the current Julia session is stored in Kokkos.KOKKOS_CMAKE_OPTIONS.","category":"page"},{"location":"config_options/#kokkos_options","page":"Configuration options","title":"kokkos_options","text":"","category":"section"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"The list of Kokkos options to pass to all KokkosProjects.","category":"page"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"Can be set using Kokkos.set_kokkos_options(). The value for the current Julia session is stored in Kokkos.KOKKOS_LIB_OPTIONS.","category":"page"},{"location":"config_options/#backends","page":"Configuration options","title":"backends","text":"","category":"section"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"The list of Kokkos backends to compile for. When in uppercase and prefixed by Kokkos_ENABLE_ the names should correspond to one of the valid device backends options. Defaults to Serial and OpenMP.","category":"page"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"Can be set using Kokkos.set_backends(), using a vector of String or ExecutionSpace sub-types.","category":"page"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"The value for the current Julia session is stored in Kokkos.KOKKOS_BACKENDS.","category":"page"},{"location":"config_options/#view_dims","page":"Configuration options","title":"view_dims","text":"","category":"section"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"List of Ints for which view dimensions will be compiled.","category":"page"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"Can be set using Kokkos.set_view_dims(). The value for the current Julia session is stored in Kokkos.KOKKOS_VIEW_DIMS.","category":"page"},{"location":"config_options/#view_types","page":"Configuration options","title":"view_types","text":"","category":"section"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"List of Types for which views will be compiled.","category":"page"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"Can be set using Kokkos.set_view_types(), using a Vector of String or Type. The value for the current Julia session is stored in Kokkos.KOKKOS_VIEW_TYPES.","category":"page"},{"location":"config_options/#build_type","page":"Configuration options","title":"build_type","text":"","category":"section"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"CMake build type.","category":"page"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"Can be set using Kokkos.set_build_type(). The value for the current Julia session is stored in Kokkos.KOKKOS_BUILD_TYPE.","category":"page"},{"location":"config_options/#build_dir","page":"Configuration options","title":"build_dir","text":"","category":"section"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"Main building directory for the current session. The wrapping library is built in $(build_dir)/wrapper-build-$(build_type)/.","category":"page"},{"location":"config_options/","page":"Configuration options","title":"Configuration options","text":"Can be set using Kokkos.set_build_dir(). The value for the current Julia session is stored in Kokkos.KOKKOS_BUILD_DIR.","category":"page"},{"location":"compilation/","page":"Compilation","title":"Compilation","text":"CurrentModule = Kokkos","category":"page"},{"location":"compilation/#Compilation","page":"Compilation","title":"Compilation","text":"","category":"section"},{"location":"compilation/#Kokkos-Projects","page":"Compilation","title":"Kokkos Projects","text":"","category":"section"},{"location":"compilation/","page":"Compilation","title":"Compilation","text":"KokkosProject\nCMakeKokkosProject\nbuild_dir\nsource_dir\nlib_path\noptions\noption!\nconfiguration_changed\nconfiguration_changed!\nconfigure\ncompile\nclean","category":"page"},{"location":"compilation/#Kokkos.KokkosProject","page":"Compilation","title":"Kokkos.KokkosProject","text":"KokkosProject\n\nAbstract type representing a C++ project using Kokkos, where it is located and how to compile it using which options.\n\n\n\n\n\n","category":"type"},{"location":"compilation/#Kokkos.CMakeKokkosProject","page":"Compilation","title":"Kokkos.CMakeKokkosProject","text":"CMakeKokkosProject(source_dir, target_lib_path;\n    target = \"all\",\n    build_type = \"Release\",\n    build_dir = joinpath(source_dir, \"cmake-build-$(lowercase(build_type))\"),\n    cmake_options = [],\n    kokkos_path = nothing, kokkos_options = Dict{String, String}()\n)\n\nConstruct a new Kokkos project in source_dir built to build_dir using CMake. After compilation, the target library can be found at joinpath(build_dir, target_lib_path).\n\nThe shared library extension of target_lib_path can be omitted, as it is added if needed by Libdl.dlopen.\n\ntarget is the CMake target needed to build the library.\n\nbuild_type controls the CMAKE_BUILD_TYPE variable, and cmake_options contains all other options passed to each CMake command.\n\nkokkos_path sets the Kokkos_ROOT CMake variable, to be used by find_package.\n\nkokkos_path should be left to nothing in most cases, as it will be replaced by the installation directory of Kokkos correctly configured with the current options (see get_kokkos_install_dir).\n\nwarning: Warning\nThe Kokkos version of the project must match the version used by the internal wrapper library. If this is not the case, the program may silently fail. Use the kokkos_path configuration variable to change the Kokkos version throughout Kokkos.jl.\n\nkokkos_options contains the list of Kokkos variables needed to configure the project (see the docs).\n\nAll commands are invoked from the current working directory.\n\n\n\n\n\nCMakeKokkosProject(project::CMakeKokkosProject, target, target_lib_path)\n\nConstruct a project from another, for a different target.\n\nThe source and build directories will stay the same, and options will be shared.\n\n\n\n\n\n","category":"type"},{"location":"compilation/#Kokkos.build_dir","page":"Compilation","title":"Kokkos.build_dir","text":"build_dir(project::KokkosProject)\n\nReturn the build directory of project.\n\n\n\n\n\n","category":"function"},{"location":"compilation/#Kokkos.source_dir","page":"Compilation","title":"Kokkos.source_dir","text":"source_dir(project::KokkosProject)\n\nReturn the source directory of project.\n\n\n\n\n\n","category":"function"},{"location":"compilation/#Kokkos.lib_path","page":"Compilation","title":"Kokkos.lib_path","text":"lib_path(project::KokkosProject)\n\nReturn the path to the target library for project.\n\n\n\n\n\n","category":"function"},{"location":"compilation/#Kokkos.options","page":"Compilation","title":"Kokkos.options","text":"options(project::KokkosProject)\n\nReturn the set of options to the target library for project.\n\n\n\n\n\n","category":"function"},{"location":"compilation/#Kokkos.option!","page":"Compilation","title":"Kokkos.option!","text":"option!(project::KokkosProject, name::String, val; prefix=\"Kokkos_\")\n\nSets the given Kokkos option for the project to val. This will result in the following compilation option: $(prefix)$(name)=$(val).\n\n\n\n\n\n","category":"function"},{"location":"compilation/#Kokkos.configuration_changed","page":"Compilation","title":"Kokkos.configuration_changed","text":"configuration_changed(project::KokkosProject)\n\nReturn true if the configuration of project changed, and needs to be recompiled.\n\n\n\n\n\n","category":"function"},{"location":"compilation/#Kokkos.configuration_changed!","page":"Compilation","title":"Kokkos.configuration_changed!","text":"configuration_changed!(project::KokkosProject, val::Bool = true)\n\nSets the configuration state of project to val.\n\n\n\n\n\n","category":"function"},{"location":"compilation/#Kokkos.configure","page":"Compilation","title":"Kokkos.configure","text":"configure(project::KokkosProject)\n\nConfigure the project with its current options.\n\n\n\n\n\n","category":"function"},{"location":"compilation/#Kokkos.compile","page":"Compilation","title":"Kokkos.compile","text":"compile(project::KokkosProject)\n\nBuilds all source files of the project.\n\nIf the project's configuration changed, it is reconfigured first.\n\n\n\n\n\n","category":"function"},{"location":"compilation/#Kokkos.clean","page":"Compilation","title":"Kokkos.clean","text":"clean(project::KokkosProject; reset=false)\n\nClean the project, forcing a recompilation of all source files.\n\nIf reset == true, the entire build_dir is removed, therefore ensuring that no cached CMake variable can interfere with the build.\n\n\n\n\n\n","category":"function"},{"location":"compilation/#Utilities","page":"Compilation","title":"Utilities","text":"","category":"section"},{"location":"compilation/","page":"Compilation","title":"Compilation","text":"get_jlcxx_root\nget_kokkos_build_dir\nget_kokkos_dir\nget_kokkos_install_dir","category":"page"},{"location":"compilation/#Kokkos.KokkosWrapper.get_jlcxx_root","page":"Compilation","title":"Kokkos.KokkosWrapper.get_jlcxx_root","text":"get_jlcxx_root()\n\nReturn the directory where the file \"JlCxxConfig.cmake\" is located for the currently loaded CxxWrap package.\n\nSetting the CMake variable JlCxx_ROOT to this path allows the CMake function find_package to load JlCxx. \n\n\n\n\n\n","category":"function"},{"location":"compilation/#Kokkos.KokkosWrapper.get_kokkos_build_dir","page":"Compilation","title":"Kokkos.KokkosWrapper.get_kokkos_build_dir","text":"get_kokkos_build_dir()\n\nThe directory where Kokkos is compiled.\n\n\n\n\n\n","category":"function"},{"location":"compilation/#Kokkos.KokkosWrapper.get_kokkos_dir","page":"Compilation","title":"Kokkos.KokkosWrapper.get_kokkos_dir","text":"get_kokkos_dir()\n\nThe directory where the sources of Kokkos are located.\n\nIf KOKKOS_PATH is not set, it defaults to the sources of Kokkos packaged with Kokkos.jl.\n\nThis directory is meant to be passed to the CMake function add_subdirectory in order to load Kokkos as an in-tree build.\n\n\n\n\n\n","category":"function"},{"location":"compilation/#Kokkos.KokkosWrapper.get_kokkos_install_dir","page":"Compilation","title":"Kokkos.KokkosWrapper.get_kokkos_install_dir","text":"get_kokkos_install_dir()\n\nThe directory where Kokkos is installed.\n\nThis directory can be passed to the CMake function find_package through the Kokkos_ROOT variable in order to load Kokkos with the same options and backends as the ones used by Kokkos.jl.\n\n\n\n\n\n","category":"function"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"CurrentModule = Kokkos","category":"page"},{"location":"calling_c/#Calling-a-Kokkos-library","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"","category":"section"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"Suppose we want to wrap the following function:","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"// my_lib.cpp\n#include \"Kokkos_Core.hpp\"\n\nextern \"C\"\nvoid fill_view(Kokkos::View<double*>& view, double value)\n{\n    Kokkos::parallel_for(Kokkos::RangePolicy<>(0, view.size()),\n    KOKKOS_LAMBDA(int i) {\n        view[i] = value;\n    });\n}","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"It is important to understand that here the argument type Kokkos::View<double*>& relies on the default template arguments for the layout type, memory space and memory traits. Therefore, its complete type will change depending on the Kokkos configuration.","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"In order for Kokkos.jl to properly call this function, we must build a view from Julia whose type matches exactly the complete type of Kokkos::View<double*>. This requires Kokkos.jl to compile some member functions of the complete Kokkos::View type, as well as its constructors.","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"To achieve this you have two options:","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"let Kokkos.jl configure the library and itself, guaranteeing that the options match\nthe library containing the function is already compiled, or you cannot/don't want to change its Kokkos configuration: you must configure Kokkos.jl with the exact same options","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"In both cases, this is how you can configure Kokkos.jl for:","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"the element type: must be present in view_types\nthe dimension: must be present in view_dims\nthe layout type (not yet implemented)\nthe MemorySpace: configured through the backends options\nthe memory traits (not yet implemented)","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"All possible combinations of those parameters are compiled when loading Kokkos.jl. For example, if view_types = [Float64, Float32], view_dims = [1, 2] and backends = [Serial, Cuda], there will be a total of 2Ã—2Ã—2 = 8 different views compiled.","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"note: Note\nYour project is not affected by the view_dims and view_types options. You only need to make sure that the combination of those options cover all usages of views in your project.","category":"page"},{"location":"calling_c/#Your-CMake-project","page":"Calling a Kokkos library","title":"Your CMake project","text":"","category":"section"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"The CMake project shouldn't need extra handling:","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"// CMakeLists.txt\ncmake_minimum_required(VERSION 3.20)\nproject(MyLib)\n\nfind_package(Kokkos REQUIRED)\n\nadd_library(MyLib SHARED my_lib.cpp)\ntarget_link_libraries(MyLib PRIVATE Kokkos::kokkos) // or PUBLIC, it doesn't matter","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"find_package requires the Kokkos_ROOT (or Kokkos_DIR) variable to be set when configuring the project. Kokkos.jl can do that for you. The advantage of this approach is that your project and Kokkos.jl will share the same Kokkos installation, reducing the compilation time.","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"If your project uses Kokkos in-tree, you have several options: ","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"keep the call to add_subdirectory the same, and configure kokkos_path to use the same path\nchange it to add_subdirectory(${Kokkos_ROOT} lib/kokkos) (the second argument is arbitrairy)","category":"page"},{"location":"calling_c/#Compiling-and-loading-the-library","page":"Calling a Kokkos library","title":"Compiling and loading the library","text":"","category":"section"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"By default, when loading Kokkos.jl the build files will be stored in \"./.kokkos-build/\", this can be configured with build_dir. It is recommended to build the project files to same directory, by using the Kokkos.KOKKOS_BUILD_DIR variable. In order for the Configuration Options to be passed correctly, you should use a CMakeKokkosProject:","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"julia> using Kokkos\n[ Info: Precompiling Kokkos [3296cea9-b0de-4b57-aba0-ce554b517c3b]\n[ Info: Configuring Kokkos project at /kokkos_jl_path/kokkos_wrapper\n[ Info: Compiling Kokkos project at /kokkos_jl_path/kokkos_wrapper\n\njulia> my_lib_path = \"./path/to/mylib/project\"\n\"./path/to/mylib/project\"\n\njulia> my_lib_build_path = joinpath(Kokkos.KOKKOS_BUILD_DIR, \"mylib\")\n\"./.kokkos-build/mylib\"\n\njulia> project = CMakeKokkosProject(my_lib_path, \"libMyLib\";\n                                    target=\"MyLib\", build_dir=my_lib_build_path)\nKokkos project from sources located at './path/to/mylib/project'\nBuilding in './.kokkos-build/mylib'\n...","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"If target is not given, CMakeKokkosProject will build by default all targets of the CMake project. Here \"libMyLib\" is the name of the result of the MyLib target: the library we want to compile and load.","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"julia> compile(project)\n\njulia> my_lib = load_lib(project)\nCLibrary(...)","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"The library can then be used the same way as you would with a shared library. Use handle to get a pointer to pass to Libdl.dlsym or use get_symbol to get the address of the fill_view function:","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"julia> v = Kokkos.View{Float64}(undef, 10)\n10-element Kokkos.Views.View1D_HostAllocated{Float64}:\n 6.365987373e-314\n 1.14495326e-316\n...\n\njulia> ccall(get_symbol(my_lib, :fill_view),\n             Cvoid, (Ref{Kokkos.View}, Float64),\n             v, 0.1)\n\njulia> v\n10-element Kokkos.Views.View1D_HostAllocated{Float64}:\n 0.1\n 0.1\n...","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"Here we called void fill_view(Kokkos::View<double>&, double), which has been compiled with a single set of template arguments for Kokkos::View. Therefore the ccall is only valid if the view passed to it matches exactly those template arguments. You can further specify the argument types of the ccall to reflect this:","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"julia> ccall(get_symbol(my_lib, :fill_view),\n             Cvoid, (Ref{Kokkos.View{Float64, 1, Kokkos.DEFAULT_DEVICE_MEM_SPACE}}, Float64),\n             v, 0.1)","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"The library is opened in a way which allows it to be unloaded afterwards using unload_lib:","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"julia> unload_lib(my_lib)\ntrue\n\njulia> is_lib_loaded(my_lib)\nfalse","category":"page"},{"location":"calling_c/","page":"Calling a Kokkos library","title":"Calling a Kokkos library","text":"This can be useful in order to reconfigure and recompile the project, to perform compilation parameters exploration for example. As long as all views are allocated through Kokkos.jl, they can be safely re-used after a library reload.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Kokkos","category":"page"},{"location":"#Kokkos.jl","page":"Home","title":"Kokkos.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Kokkos.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Kokkos.jl allows you to create Kokkos::View instances from Julia, to configure and compile a Kokkos project or load an existing library, and call its functions and the Kokkos kernels it defines.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Kokkos.jl supports all backends of Kokkos.","category":"page"},{"location":"","page":"Home","title":"Home","text":"View inherits the AbstractArray interface of Julia, and can therefore be used as a normal Array. All view accesses are done through calls to Kokkos::View::operator(), and therefore can access CPU or GPU memory seamlessly.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nCurrently Kokkos.jl does not create Kokkos kernels (using Kokkos::parallel_for) since it  would require automatic C++ code generation. You also cannot run Julia code in Kokkos kernels, since Julia cannot be used in threads it doesn't own (or did not adopt, in v1.9).","category":"page"},{"location":"spaces/","page":"Execution & Memory Spaces","title":"Execution & Memory Spaces","text":"CurrentModule = Kokkos.Spaces","category":"page"},{"location":"spaces/#Execution-and-Memory-Spaces","page":"Execution & Memory Spaces","title":"Execution & Memory Spaces","text":"","category":"section"},{"location":"spaces/","page":"Execution & Memory Spaces","title":"Execution & Memory Spaces","text":"Space\nExecutionSpace\nMemorySpace\naccessible\nenabled\nexecution_space\nmemory_space\nmain_space_type\nkokkos_name","category":"page"},{"location":"spaces/#Kokkos.Spaces.Space","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.Space","text":"Space\n\nAbstract super type of all execution and memory spaces.\n\nMain subtypes:\n\nExecutionSpaces: super type of all execution spaces\nMemorySpaces: super type of all memory spaces\n\nAll Kokkos spaces have a main abstract type (Serial, Cuda, HostSpace, HIPSpace...) which are defined even if it has not been compiled on the C++ side. Those main abstract types should be the ones used when specifying a space. This allows methods like enabled to work independently from the compiled internal library.\n\nWhen a space is compiled, a sub-type of its main type is defined by CxxWrap, leading to the following type structure: SerialImplAllocated <: SerialImpl <: Serial <: ExecutionSpace <: Space. Below the main space type (here, Serial), the sub-types are only defined if they are compiled, and therefore they should not be relied upon. \n\nNavigating the type tree can be made easier through main_space_type.\n\n\n\n\n\n","category":"type"},{"location":"spaces/#Kokkos.Spaces.ExecutionSpace","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.ExecutionSpace","text":"ExecutionSpace <: Space\n\nAbstract super-type of all execution spaces.\n\nSub-types:\n\nSerial\nOpenMP\nOpenACC\nOpenMPTarget\nThreads\nCuda\nHIP\nHPX\nSYCL\n\nAll sub-types are always defined, but only some of them are enabled. To enable an execution space, you must enable its related Kokkos backend, e.g. '-DKokkosENABLESERIAL=ON' for the Serial execution space.\n\nTo do this you can set the backends option with Kokkos.set_backends, or specify the option directly through kokkos_options.\n\n\n\n\n\n","category":"type"},{"location":"spaces/#Kokkos.Spaces.MemorySpace","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.MemorySpace","text":"MemorySpace <: Space\n\nAbstract super-type of all memory spaces.\n\nSub-types:\n\nHostSpace\nCudaSpace\nCudaHostPinnedSpace\nCudaUVMSpace\nHIPSpace\nHIPHostPinnedSpace\nHIPManagedSpace\n\nSub-types work the same as for ExecutionSpace. They can be enabled by enabling their respective backend.\n\n\n\n\n\n","category":"type"},{"location":"spaces/#Kokkos.Spaces.accessible","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.accessible","text":"accessible(::Union{<:MemorySpace, Type{<:MemorySpace}})\n\nReturn true if the memory space is accessible from the default host execution space.\n\nEquivalent to Kokkos::SpaceAccessibility<Kokkos::DefaultHostExecutionSpace, Space>::accessible\n\n\n\n\n\naccessible(::View)\n\nReturn true if the view is accesssible from the default host execution space.\n\n\n\n\n\n","category":"function"},{"location":"spaces/#Kokkos.Spaces.enabled","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.enabled","text":"enabled(space::Union{Space, Type{<:Space}})\n\nReturn true if the given execution or memory space is compiled.\n\n\n\n\n\n","category":"function"},{"location":"spaces/#Kokkos.Spaces.execution_space","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.execution_space","text":"execution_space(space::Union{<:MemorySpace, Type{<:MemorySpace}})\n\nReturn the execution space associated by default to the given memory space.\n\n\n\n\n\n","category":"function"},{"location":"spaces/#Kokkos.Spaces.memory_space","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.memory_space","text":"memory_space(space::Union{<:ExecutionSpace, Type{<:ExecutionSpace}})\n\nReturn the memory space associated by default to the given execution space.\n\n\n\n\n\n","category":"function"},{"location":"spaces/#Kokkos.Spaces.main_space_type","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.main_space_type","text":"main_space_type(space::Union{<:Space, Type{<:Space}})\n\nReturn the main space type of space, e.g. for Serial, SerialImpl or SerialImplAllocated we get Serial.\n\n\n\n\n\n","category":"function"},{"location":"spaces/#Kokkos.Spaces.kokkos_name","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.kokkos_name","text":"kokkos_name(space::Union{Space, Type{<:Space}})\n\nReturn the name of the execution or memory space as defined by Kokkos.\n\nEquivalent to Kokkos::space::name()\n\n\n\n\n\n","category":"function"},{"location":"spaces/#Constants","page":"Execution & Memory Spaces","title":"Constants","text":"","category":"section"},{"location":"spaces/","page":"Execution & Memory Spaces","title":"Execution & Memory Spaces","text":"COMPILED_EXEC_SPACES\nCOMPILED_MEM_SPACES","category":"page"},{"location":"spaces/#Kokkos.Spaces.COMPILED_EXEC_SPACES","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.COMPILED_EXEC_SPACES","text":"COMPILED_EXEC_SPACES::Tuple{Vararg{Type{<:ExecutionSpace}}}\n\nList of all compiled Kokkos execution spaces.\n\n\n\n\n\n","category":"constant"},{"location":"spaces/#Kokkos.Spaces.COMPILED_MEM_SPACES","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.COMPILED_MEM_SPACES","text":"COMPILED_MEM_SPACES::Tuple{Vararg{Type{<:MemorySpace}}}\n\nList of all compiled Kokkos execution spaces.\n\n\n\n\n\n","category":"constant"},{"location":"spaces/#Default-spaces","page":"Execution & Memory Spaces","title":"Default spaces","text":"","category":"section"},{"location":"spaces/","page":"Execution & Memory Spaces","title":"Execution & Memory Spaces","text":"DEFAULT_DEVICE_SPACE\nDEFAULT_DEVICE_MEM_SPACE\nDEFAULT_HOST_SPACE\nDEFAULT_HOST_MEM_SPACE\nSHARED_MEMORY_SPACE\nSHARED_HOST_PINNED_MEMORY_SPACE","category":"page"},{"location":"spaces/#Kokkos.Spaces.DEFAULT_DEVICE_SPACE","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.DEFAULT_DEVICE_SPACE","text":"DEFAULT_DEVICE_SPACE::Type{<:ExecutionSpace}\n\nThe default execution space where kernels are applied on the device.\n\nEquivalent to Kokkos::DefaultExecutionSpace.\n\n\n\n\n\n","category":"type"},{"location":"spaces/#Kokkos.Spaces.DEFAULT_DEVICE_MEM_SPACE","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.DEFAULT_DEVICE_MEM_SPACE","text":"DEFAULT_DEVICE_MEM_SPACE::Type{<:MemorySpace}\n\nThe default memory space where views are stored on the device.\n\nEquivalent to Kokkos::DefaultExecutionSpace::memory_space.\n\n\n\n\n\n","category":"type"},{"location":"spaces/#Kokkos.Spaces.DEFAULT_HOST_SPACE","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.DEFAULT_HOST_SPACE","text":"DEFAULT_HOST_SPACE::Type{<:ExecutionSpace}\n\nThe default execution space where kernels are applied on the host.\n\nEquivalent to Kokkos::DefaultHostExecutionSpace.\n\n\n\n\n\n","category":"type"},{"location":"spaces/#Kokkos.Spaces.DEFAULT_HOST_MEM_SPACE","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.DEFAULT_HOST_MEM_SPACE","text":"DEFAULT_HOST_MEM_SPACE::Type{<:MemorySpace}\n\nThe default memory space where views are stored on the host.\n\nEquivalent to Kokkos::DefaultHostExecutionSpace::memory_space.\n\n\n\n\n\n","category":"type"},{"location":"spaces/#Kokkos.Spaces.SHARED_MEMORY_SPACE","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.SHARED_MEMORY_SPACE","text":"SHARED_MEMORY_SPACE::Union{Nothing, Type{<:MemorySpace}}\n\nThe shared memory space between the host and device, or nothing if there is none.\n\nEquivalent to Kokkos::SharedSpace if Kokkos::has_shared_space is true.\n\n\n\n\n\n","category":"type"},{"location":"spaces/#Kokkos.Spaces.SHARED_HOST_PINNED_MEMORY_SPACE","page":"Execution & Memory Spaces","title":"Kokkos.Spaces.SHARED_HOST_PINNED_MEMORY_SPACE","text":"SHARED_HOST_PINNED_MEMORY_SPACE::Union{Nothing, Type{<:MemorySpace}}\n\nThe shared pinned memory space between the host and device, or nothing if there is none.\n\nEquivalent to Kokkos::SharedHostPinnedSpace if Kokkos::has_shared_host_pinned_space is true.\n\n\n\n\n\n","category":"type"}]
}
